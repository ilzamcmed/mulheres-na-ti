{"version":3,"sources":["Components/Header/Header.js","Services/api/Api.js","Components/Button/Button.js","Pages/Home/Home.js","Components/SingleCard/SingleCard.js","Pages/Biography/Biography.js","routes.js","App.js","serviceWorker.js","index.js"],"names":["Header","className","Api","axios","create","baseURL","Button","disabled","onClick","acao","Home","state","biographies","biographyInfo","page","componentDidMount","a","loadBiobraphies","get","response","data","docs","setState","nextPage","pages","pageNumber","prevPage","this","console","log","length","map","item","Component","SingleCard","id","nome","description","url","key","href","Biography","biography","props","match","params","to","Routes","exact","path","component","App","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.e1ad485b.chunk.js","sourcesContent":["import React from 'react';\nimport './Header.css'\n\nconst Header = () => {\n    return (\n        <div className=\"main-header\">\n            <h4>Mulheres na TI</h4>\n        </div>\n    )\n}\n\nexport default Header;","import axios from  'axios';\n\nconst Api = axios.create({ baseURL: 'https://api-women-ti.herokuapp.com/api' })\n\nexport default Api;","import React from 'react';\nimport './Button.css'\n\nconst Button = ({ disabled, onClick, acao }) => {\n    return (\n        <div>\n            <button className=\"action__button\" disabled={disabled} onClick={onClick}>{acao}</button>\n        </div>\n\n    )\n}\n\nexport default Button;","import React, { Component } from 'react';\nimport Api from '../../Services/api/Api'\nimport Cards from '../../Components/Cards/Cards';\n\nimport './Home.css';\nimport Button from '../../Components/Button/Button';\n\n\nclass Home extends Component {\n    state = {\n        biographies: [],\n        biographyInfo: {},\n        page: 1\n    }\n\n    //assim que minha plicação for montada, chamo o didmount, eu carrego as biografias\n    componentDidMount = async () => {\n        await this.loadBiobraphies()\n    }\n\n    //nessa função, usa o async/await para esperar carrecar a API e o response é a resposta da API\n    loadBiobraphies = async (page = 1) => {\n        const response = await Api.get(`/biographies?page=${page}`);\n        const { docs, ...biographyInfo } = response.data\n\n        // console.log(docs)\n        this.setState({ biographies: docs, page, biographyInfo })\n    }\n\n    nextPage = () => {\n        const { page, biographyInfo } = this.state;\n\n        if (page === biographyInfo.pages) return;\n\n        const pageNumber = page + 1;\n\n        this.loadBiobraphies(pageNumber)\n\n    }\n\n    prevPage = () => {\n        const { page } = this.state;\n\n        if (page === 1) return;\n        const pageNumber = page - 1;\n        this.loadBiobraphies(pageNumber)\n    }\n\n\n\n    render() {\n        const { biographies, page } = this.state\n\n        console.log(biographies)\n        return (\n            <div className=\"list__women\">\n\n                {biographies.length ? biographies.map(item =>\n\n                        ( // esse () é o retorn do map\n                            <Cards\n                                key={item._id}\n                                nome={item.nome}\n                                description={item.description}\n                                acesso={`/biography/${item._id}`}\n\n                            />\n                        )\n\n                ) :\n                    <h1>Loading...</h1>\n                }\n                <div className=\"actions\">\n                    <Button\n                        disabled={page === 1}\n                        onClick={this.prevPage}\n                        acao=\"Anterior\" />\n\n                    <Button\n                        disabled={page === 2}\n                        onClick={this.nextPage}\n                        acao=\"Próximo\"\n                    />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Home;\n// disabled={page===biographyInfo}","import React from 'react';\nimport './SingleCard.css';\n\n \nconst SingleCard = ({ id, nome, description, url }) => {\n    return (\n        <article key={id}>\n            <strong className=\"list__women-name\">{nome}</strong>\n            <p className=\"list__women-description\">{description}</p>\n            <a href={url} className=\"list__women-link\">Veja mais</a>\n        </article>\n    )\n}\n\nexport default SingleCard;","import React, { Component } from 'react';\nimport Api from '../../Services/api/Api';\nimport SingleCard from '../../Components/SingleCard/SingleCard';\nimport { Link } from 'react-router-dom';\nimport Button from '../../Components/Button/Button'\n\n\nimport './Biography.css'\n\nclass Biography extends Component {\n    state = {\n        biography: {}\n    }\n\n    async componentDidMount() {\n        const { id } = this.props.match.params;\n\n        const response = await Api.get(`/biography/${id}`)\n\n        this.setState({ biography: response.data })\n    }\n\n\n    render() {\n\n        const { biography } = this.state\n\n        return (\n            <div>\n\n                <div className=\"women\">\n                    <SingleCard\n                        nome={biography.nome}\n                        description={biography.description}\n                        url={biography.url}\n                    />\n                    <Link to=\"/\"><Button acao=\"Página inicial\" /></Link>\n                </div>\n\n            </div>\n        );\n    }\n}\n\nexport default Biography;","import React from 'react';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\n\nimport Home from './Pages/Home/Home';\nimport Biography from './Pages/Biography/Biography';\n\n\n\nconst Routes = () => {\n    return(\n        <BrowserRouter>\n        <Switch>\n            <Route exact path=\"/\" component={Home} />\n            <Route path=\"/biography/:id\" component={Biography}/>\n        </Switch>\n        </BrowserRouter>\n    )\n}\n\n\nexport default Routes;","import React from 'react';\nimport './App.css';\nimport Header from './Components/Header/Header';\n\nimport Routes from './routes'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Header />\n      <Routes />\n     \n    </div>\n  );\n}\n\nexport default App;\n\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}